<!-- This document was prepared using Pandoc2rfc, https://github.com/miekg/pandoc2rfc -->

  
<section title="RPL_ISUPPORT Parameters" anchor="rpl_isupport-parameters">
  
  <t>
    Servers MAY send parameters that are not covered in this document.
  </t>
  <section title="CLIENTVER" anchor="clientver">
    
    <figure><artwork>
  CLIENTVER=string
</artwork></figure>
    <t>
      The CLIENTVER parameter is informational purposes only and
      indicates the version of the client protocol supported by the
      server that the client is connected to. The version specified by
      this document is <spanx style="verb">3</spanx>.
    </t>
    <t>
      The value MUST be specified. A client SHOULD NOT use this value to
      change client behaviour.
    </t>
    <t>
      Example CLIENTVER tokens:
    </t>
    <figure><artwork>
  CLIENTVER=3

  CLIENTVER=3.2
</artwork></figure>
  </section>
  <section title="CASEMAPPING" anchor="casemapping">
    
    <figure><artwork>
  CASEMAPPING=string
</artwork></figure>
    <t>
      The CASEMAPPING parameter is used to indicate what method if used
      by the server to compare equality of case-insensitive strings.
      Possible values are:
    </t>
    <t><list style="symbols">
      <t>
        
          <spanx style="verb">ascii</spanx>: The ASCII characters 97 to 122
          (decimal) are defined as the lower-case characters of ASCII 65
          to 90 (decimal). No other character equivalency is defined.
        
      </t>
      <t>
        
          <spanx style="verb">rfc1459</spanx>: The ASCII characters 97 to 126
          (decimal) are defined as the lower-case characters of ASCII 65
          to 94 (decimal). No other character equivalency is defined.
        
      </t>
      <t>
        
          <spanx style="verb">strict-rfc1459</spanx>: The ASCII characters 97 to
          125 (decimal) are defined as the lower-case characters of
          ASCII 65 to 93 (decimal). No other character equivalency is
          defined.
        
      </t>
    </list></t>
    <t>
      The value MUST be specified. The default value for this token is
      <spanx style="verb">rfc1459</spanx>, and clients should assume this until
      the server sends a CASEMAPPING token.
    </t>
    <t>
      An example CASEMAPPING token:
    </t>
    <figure><artwork>
  CASEMAPPING=rfc1459
</artwork></figure>
  </section>
  <section title="CHANLIMIT" anchor="chanlimit">
    
    <figure><artwork>
  CHANLIMIT=prefix:number[,prefix:number[,...]]
</artwork></figure>
    <t>
      The CHANLIMIT parameter is used to indicate the maximum amount of
      channels that a client may join. The value is a series of
      "prefix:number" pairs, where "prefix" refers
      to one or more prefix characters defined in the PREFIX
      (<xref target="prefix"/>) token, and "number"
      indicates how many channels of the given type combined may be
      joined. The number parameter MAY be omitted if no limit is placed
      on the number of channels.
    </t>
    <t>
      A client SHOULD NOT make any assumptions about how many channels
      other clients may join based on the CHANLIST parameter.
    </t>
    <t>
      An example CHANLIMIT token:
    </t>
    <figure><artwork>
  CHANLIMIT=#+:25,&amp;:
</artwork></figure>
    <t>
      Indicates that a client may join up to 25 channels with the prefix
      <spanx style="verb">#</spanx> and <spanx style="verb">+</spanx>, and an unlimited
      number of channels with the <spanx style="verb">&amp;</spanx> prefix.
    </t>
  </section>
  <section title="CHANMODES" anchor="chanmodes">
    
    <figure><artwork>
  CHANMODES=A,B,C,D
</artwork></figure>
    <t>
      The CHANMODES parameter is used to indicate the channel modes
      available and the arguments they take. There are four categories
      of modes, defined as follows:
    </t>
    <t><list style="symbols">
      <t>
        
          Type A: Modes that add or remove an address to or from a list.
          These modes MUST always have a parameter when sent from the
          server to a client. A client MAY issue the mode without an
          argument to obtain the current contents of the list.
        
      </t>
      <t>
        
          Type B: Modes that change a setting on a channel. These modes
          MUST always have a parameter.
        
      </t>
      <t>
        
          Type C: Modes that change a setting on a channel. These modes
          MUST have a parameter when being set, and MUST NOT have a
          parameter when being unset.
        
      </t>
      <t>
        
          Type D: Modes that change a setting on a channel. These modes
          MUST NOT have a parameter.
        
      </t>
    </list></t>
    <t>
      To allow for future extensions, a server MAY send additional
      types, delieted by the comma character (<spanx style="verb">,</spanx>). The
      behaviour of any additional types is undefined.
    </t>
    <t>
      The IRC server MUST NOT list modes in the CHANMODES parameter that
      are contained within the PREFIX (<xref target="prefix"/>)
      parameter. However, for completeness, modes within the PREFIX
      parameter may be treated as type B modes.
    </t>
    <t>
      An example CHANMODES token:
    </t>
    <figure><artwork>
  CHANMODES=b,k,l,imnpst
</artwork></figure>
  </section>
  <section title="CHANNELLEN" anchor="channellen">
    
    <figure><artwork>
  CHANNELLEN=number
</artwork></figure>
    <t>
      The CHANNELLEN parameter specifies the maximum length of a channel
      name that a client may join. A client elsewhere on the network MAY
      join a channel with a name length of a higher value. The value
      MUST be specified and MUST be numeric.
    </t>
    <t>
      An example CHANNELLEN token:
    </t>
    <figure><artwork>
  CHANNELLEN=50
</artwork></figure>
    <t>
      Limits the length of a channel name that a user may join to 50
      characters.
    </t>
  </section>
  <section title="CHANTYPES" anchor="chantypes">
    
    <figure><artwork>
  CHANTYPES=[string]
</artwork></figure>
    <t>
      Special characters used as prefixes are reserved to differentiate
      channels from other namespaces within the IRC protocol. The
      CHANTYPES parameter specifies these characters.
    </t>
    <t>
      The value is OPTIONAL and when it is not specified indicates that
      no channel types are supported.
    </t>
    <t>
      An example CHANTYPES token:
    </t>
    <figure><artwork>
  CHANTYPES=&amp;#
</artwork></figure>
    <t>
      Denotes the andpersand (<spanx style="verb">&amp;</spanx>) and hash
      (<spanx style="verb">#</spanx>) characters as valid channel prefixes
    </t>
  </section>
  <section title="CNOTICE" anchor="cnotice">
    
    <figure><artwork>
  CNOTICE
</artwork></figure>
    <t>
      The CNOTICE parameter indicates that the server supports the
      <spanx style="verb">CNOTICE</spanx> command. An extension of the NOTICE
      command, as defined in <xref target="notice-command"/>, it
      allows users with a specific status in a channel to issue a NOTICE
      command to a user within that channel, free of certain
      restrictions a server MAY apply to NOTICE.
    </t>
    <t>
      The CNOTICE parameter MUST NOT be specified with a value.
    </t>
    <t>
      An example CNOTICE token:
    </t>
    <figure><artwork>
  CNOTICE
</artwork></figure>
  </section>
  <section title="CPRIVMSG" anchor="cprivmsg">
    
    <figure><artwork>
  CPRIVMSG
</artwork></figure>
    <t>
      The CPRIVMSG parameter indicates that the server supports the
      <spanx style="verb">CPRIVMSG</spanx> command. An extension of the PRIVMSG
      command, as defined in <xref target="privmsg-command"/>, it
      allows users with a specific status in a channel to issue a
      PRIVMSG command to a user within that channel, free of certain
      restrictions a server MAY apply to PRIVMSG.
    </t>
    <t>
      The CPRIVMSG parameter MUST NOT be specified with a value.
    </t>
    <t>
      An example CPRIVMSG token:
    </t>
    <figure><artwork>
  CPRIVMSG
</artwork></figure>
  </section>
  <section title="ELIST" anchor="elist">
    
    <figure><artwork>
  ELIST=string
</artwork></figure>
    <t>
      The ELIST parameter indicates that the server supports search
      extensions to the LIST command. The value is required, and is a
      non-delimited set of characters which each denote an extension.
      The following extensions, which a client MUST treat as being case
      insensitive are defined:
    </t>
    <t><list style="symbols">
      <t>
        
          C: Searching based on creation time, via the
          <spanx style="verb">C&lt;val</spanx> and <spanx style="verb">C&gt;val</spanx>
          modifiers to search for a channel creation time that is lower
          or higher than val, respectively.
        
      </t>
      <t>
        
          M: Searching based on mask.
        
      </t>
      <t>
        
          N: Searching based on ~mask.
        
      </t>
      <t>
        
          P: To explain. XXX -
        
      </t>
      <t>
        
          T: Searching based on topic time, via the
          <spanx style="verb">T&lt;val</spanx> and <spanx style="verb">T&gt;val</spanx>
          modifiers to search for a topic time that is lower of higher
          than val, respectively.
        
      </t>
      <t>
        
          U: Searching based on user count within the channel, but the
          <spanx style="verb">&lt;val</spanx> and <spanx style="verb">&gt;val</spanx>
          modifiers to search for a chnanel that has less than or more
          than val users, respectively.
        
      </t>
    </list></t>
    <t>
      An example ELIST token:
    </t>
    <figure><artwork>
  ELIST=CMNTU
</artwork></figure>
  </section>
  <section title="EXCEPTS" anchor="excepts">
    
    <figure><artwork>
  EXCEPTS[=letter]
</artwork></figure>
    <t>
      The EXCEPTS parameter indicates that the server supports "ban
      exceptions", as defined in ()[#channel-bans-and-exceptions].
      The value is OPTIONAL and when not specified indicates taht the
      letter 'e' is used as the channel mode for ban exceptions. When
      the value is specified, it indiates the letter which is used for
      ban exceptions.
    </t>
    <t>
      An example EXCEPTS token:
    </t>
    <figure><artwork>
  EXCEPTS
</artwork></figure>
  </section>
  <section title="INVEX" anchor="invex">
    
    <figure><artwork>
  INVEX[=letter]
</artwork></figure>
    <t>
      The INVEX parameter indicates that the server supports
      "invite exceptions", as defined in
      <xref target="channel-invitation"/>. The value is OPTIONAL,
      and when not specified indicates that the letter
      <spanx style="verb">I</spanx> is used as the channel mode for invite
      exceptions. When the value is specified, it indicates the letter
      is used for invite exceptions.
    </t>
    <t>
      An example INVEX token:
    </t>
    <figure><artwork>
  INVEX
</artwork></figure>
  </section>
  <section title="MAXLIST" anchor="maxlist">
    
    <figure><artwork>
  MAXLIST=mode:number[,mode:number[,...]]
</artwork></figure>
    <t>
      The MAXLIST parameter limits how many "variable" modes
      of type A that have been defined in the CHANMODES (()[#chanmodes])
      token a client may set in total on a channel. The value MUST be
      specified and is a set of "mode:number" pairs, where
      "mode" refers to a type A mode defined in the CHANMODES
      token and "number" indicates how many of the given modes
      combined a client may issue on a channel.
    </t>
    <t>
      A client MUST NOT make any assumptions about how many of the given
      modes actually exist on the channel. The limit applies only to the
      client setting new modes of the given types.
    </t>
    <t>
      Example MAXLIST tokens:
    </t>
    <figure><artwork>
  MAXLIST=beI:25
</artwork></figure>
    <t>
      Indicates that a client may set to a total of 25 of a combination
      of <spanx style="verb">+b</spanx>, <spanx style="verb">+e</spanx>, and
      <spanx style="verb">+I</spanx> modes.
    </t>
    <figure><artwork>
  MAXLIST=e:25,eI:50
</artwork></figure>
    <t>
      Indicates that a client may set up to a total of 25
      <spanx style="verb">+b</spanx> modes, and up to a total of 50 of a
      combination of <spanx style="verb">+e</spanx> and <spanx style="verb">+I</spanx>
      modes.
    </t>
  </section>
  <section title="MODES" anchor="modes">
    
    <figure><artwork>
  MODES=[number]
</artwork></figure>
    <t>
      The MODES parameter limits how many "variable" modes may
      be set on a channel by a single MODE command from a client. A
      "variable" mode is defined as being a type A, B or C as
      defined for the CHANMODES (<xref target="chanmodes"/>)
      parameter, and the channel modes specified in the PREFIX
      (<xref target="prefix"/>) parameter.
    </t>
    <t>
      A client SHOULD NOT issue more "variables" modes than
      this in a single "mode" command. A server MAY however
      issue more "variable" modes than this in a single MODE
      command. The value is OPTIONAL and when specified indicates that
      no limit is places upon "variable" modes. The value, if
      specified, MUST be numeric.
    </t>
    <t>
      An example MODES token:
    </t>
    <figure><artwork>
  MODES=3
</artwork></figure>
    <t>
      Limits the number of "variable" modes from a client to
      the server to 3 per MODE command.
    </t>
  </section>
  <section title="NETWORK" anchor="network">
    
    <figure><artwork>
  NETWORK=string
</artwork></figure>
    <t>
      The NETWORK parameter is for informational purposes only and
      defines the name of the IRC network that the client is connected
      to. The value MUST be specified. A client SHOULD NOT use the value
      to make assumptions about supported features on the server.
    </t>
    <t>
      An example NETWORK token:
    </t>
    <figure><artwork>
  NETWORK=EFnet
</artwork></figure>
    <t>
      Indicates the client is connected to the EFnet IRC network.
    </t>
  </section>
  <section title="NICKLEN" anchor="nicklen">
    
    <figure><artwork>
  NICKLEN=number
</artwork></figure>
    <t>
      The NICKLEN parameter specifies the maximum length of a nickname
      that a client can use. A client elsewhere on the network MAY use a
      nick length of a higher value. The value MUST be specified and
      MUST be numeric.
    </t>
    <t>
      An example NICKLEN token:
    </t>
    <figure><artwork>
  NICKLEN=9
</artwork></figure>
    <t>
      Limits the length of a nickname to 9 characters.
    </t>
  </section>
  <section title="PREFIX" anchor="prefix">
    
    <figure><artwork>
  PREFIX=[(modes)prefixes]
</artwork></figure>
    <t>
      Within channels, clients can have various different statuses,
      denoted by single character "prefixes". The PREFIX
      parameter specifies these pefixes and the channel mode character
      that it is mapped to. There is a one-to-one mapping between
      prefixes and channel modes. The prefixes are in descending order,
      from the prefix that gives the most privileges to the prefix that
      gives the least.
    </t>
    <t>
      The value is OPTIONAL and when it is not specified indicates that
      no prefixes are supported.
    </t>
    <t>
      An example PREFIX token:
    </t>
    <figure><artwork>
  PREFIX=(ov)@+
</artwork></figure>
    <t>
      Denotes that the at character (<spanx style="verb">@</spanx>) is mapped to
      the channel mode denoted by the letter 'o', and the plus character
      (<spanx style="verb">+</spanx>) is mapped to the channel mode denoted by
      the letter 'v'.
    </t>
  </section>
  <section title="SAFELIST" anchor="safelist">
    
    <figure><artwork>
  SAFELIST
</artwork></figure>
    <t>
      The SAFELIST parameter indicates that the client may request a
      <spanx style="verb">LIST</spanx> command from the server, without being
      disconnected by the large amount of data the LIST command
      generates. The SAFELIST parameter MUST NOT be specified with a
      value.
    </t>
    <t>
      An example SAFELIST token:
    </t>
    <figure><artwork>
  SAFELIST
</artwork></figure>
  </section>
  <section title="SILENCE" anchor="silence">
    
    <figure><artwork>
  SILENCE=number
</artwork></figure>
    <t>
      The SILENCE parameter indicates the maximum number of entries a
      user may have in their silence list. The value is OPTIONAL and if
      it is not specified indicates SILENCE support is not available.
    </t>
    <t>
      Whilst a formal definition of the SILENCE command is outside the
      scope of this document, it is generally a list of masks of
      equivalent form to those defined as type A in the CHANMODES
      (<xref target="chanmodes"/>) parameter. Any messages, as
      defined in <xref target="sending-messages"/> that originate
      from another client matching the given mask, with a destination of
      the client itself will be dropped by the server.
    </t>
    <t>
      An example SILENCE token:
    </t>
    <figure><artwork>
  SILENCE=15
</artwork></figure>
    <t>
      Indicates that the client may have 15 masks in their silence list.
    </t>
  </section>
  <section title="STATUSMSG" anchor="statusmsg">
    
    <figure><artwork>
  STATUSMSG=string
</artwork></figure>
    <t>
      The STATUSMSG parameter indicates that the server supports a
      method for the client to send a message via the NOTICE command to
      those people on a channel with the specified status.
    </t>
    <t>
      The value MUST be specified and MUST be a non-delimited list of
      prefixes that have been defined in the PREFIX
      (<xref target="prefix"/>) parameter. The server MUST NOT
      advertise a character in STATUSMSG which is also present in
      CHANTYPES (<xref target="chantypes"/>).
    </t>
    <t>
      An example STATUSMSG token:
    </t>
    <figure><artwork>
  STATUSMSG=@+
</artwork></figure>
    <t>
      Presuming the hash character (<spanx style="verb">#</spanx>) is defined
      within the CHANTYPES (<xref target="chantypes"/>)
      parameter, allows the client to send a NOTICE command to
      "@#channel" and "+#channel".
    </t>
  </section>
  <section title="TARGMAX" anchor="targmax">
    
    <figure><artwork>
  TARGMAX=[cmd:number,cmd:number,...]
</artwork></figure>
    <t>
      Certain command from a client MAY contain multiple targets,
      delimited by a comma character (<spanx style="verb">,</spanx>). The TARGMAX
      parameter defines the maximum number of targets allowed for
      commands which accept multiple targets. The value is OPTIONAL and
      is a set of "cmd:number" pairs, where "cmd"
      refers to a command the client MAY send to the server, and
      "number" refers to the maximum number of targets for
      this command. A client MUST treat the "cmd" field as
      case insensitive.
    </t>
    <t>
      If the number is not specified for a particular command, then the
      command does not have a limit on the number of targets. The server
      MUST specify all commands available to the user which support
      multiple targets.
    </t>
    <t>
      If the TARGMAX parameter is not advertised, or a value is not sent
      then a client SHOULD assume that no commands except the JOIN and
      PART commands accept multiple parameters.
    </t>
    <t>
      An example TARGMAX token:
    </t>
    <figure><artwork>
  TARGMAX=PRIVMSG:3,WHOIS:1,JOIN:
</artwork></figure>
    <t>
      Indicates that a client could issue 3 targets to a PRIVMSG
      command, 1 target to a WHOIS command and an unlimited number of
      targets to a JOIN command.
    </t>
  </section>
  <section title="TOPICLEN" anchor="topiclen">
    
    <figure><artwork>
  TOPICLEN=number
</artwork></figure>
    <t>
      The TOPICLEN parameter specifies the maximum length of a topic,
      defined in <xref target="topic-command"/> that a client may
      set on a channel. A channel on the network MAY have a topic with a
      longer length. The value MUST be specified and MUST be numeric.
    </t>
    <t>
      An example TOPICLEN token:
    </t>
    <figure><artwork>
  TOPICLEN=120
</artwork></figure>
    <t>
      Limits the length of a topic to 120 characters.
    </t>
  </section>
  <section title="WATCH" anchor="watch">
    
    <figure><artwork>
  WATCH=number
</artwork></figure>
    <t>
      The WATCH parameter indicates the maximum number of nicknames a
      user may have in their watch list. The value MUST be specified.
    </t>
    <t>
      Whilst a formal definition of the WATCH command is outside the
      scope of this document, it is generally a method for clients to
      have the server notify them when a given nickname joins or leaves
      the network. It is designed to replace repetitive use by clients
      of the ISON command, as defined in
      <xref target="ison-command"/>.
    </t>
    <t>
      An example WATCH token:
    </t>
    <figure><artwork>
  WATCH=100
</artwork></figure>
    <t>
      Indicates that a client may have up to 100 nicks in their watch
      list.
    </t>
  </section>
</section>


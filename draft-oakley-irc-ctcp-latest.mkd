---
title: "Internet Relay Chat: Client-to-Client Protocol (CTCP)"
abbrev: IRC CTCP
docname: draft-oakley-irc-ctcp-latest
category: info
updates: 1459, 2812

ipr: trust200902
submissionType: independent

stand_alone: yes
pi:
  toc: yes
  sortrefs: yes
  symrefs: yes
  comments: yes

author:
  -
    ins: M. Mikulėnas
    name: Mantas Mikulėnas
    organization: Independent
    email: grawity@gmail.com
  -
    ins: D. Oakley
    name: Daniel Oakley
    organization: ircdocs
    email: daniel@danieloaks.net

--- abstract

This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.

This document updates RFCs 1459 and 2812.

--- middle

# Introduction

The core Internet Relay Chat (IRC) protocol as described in {{!RFC1459}} and {{!RFC2812}} does not provide a way to exchange computer-readable information directly between clients. The Client-to-Client Protocol (CTCP) lets them exchange messages that get processed, displayed or responded to in special ways.

CTCP can be used to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients among other uses. This document covers the subset of CTCP which is commonly implemented, and clients implementing this specification are compatible with those implementing the protocol as described by older documents.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in {{!RFC2119}}.


# Protocol Structure

CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter.

Queries MAY be sent to channels. Replies MUST always be sent to the querying client only, not the channel.

Many servers implement filters so that only specific CTCP commands can be sent to channels. When this is done, channel operators can typically enable and disable this filtering with a channel mode.


# Message Syntax

The ABNF {{!RFC5234}} for CTCP message bodies is as follows:

~~~abnf
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and SP

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SP params ] [ delim ]
~~~
{: artwork-align="center" artwork-name="syntax"}

Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.

The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, but software MUST accept incoming messages which lack it.

In message examples throughout this document, the CTCP delimiter is shown as `\x01`.

Here are two examples of valid CTCP queries and replies:

~~~
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION Snak for Mac 4.13\x01

  :alice!a@localhost PRIVMSG #ircv3 :\x01PING 1473523796 918320
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
~~~


# Messages

There is not a formal registry of CTCP message names, and CTCP responses are uniquely flexible. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and send no response to the querying user.


# Acknowledgements

Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled Mardam-Bey for advice on client flood protection.

Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.

Special thanks to dequis, Sadie Powell and James Wheare for help with this and related work.


# Security Considerations

CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.

Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement "low-level quoting" or "CTCP-level quoting" when parsing messages.

Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.

CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.


# IANA Considerations

This document has no actions for IANA.


--- back


# Message List

This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.

The Query and Reply lines below represent variables by surrounding them with angle brackets.


## ACTION

~~~
Query:  ACTION <text>
Reply:  None
~~~

Clients receiving this message MUST display \<text\> as a third-person action or emote. Users typically use the `/me` command in their IRC clients to send this message.

If \<text\> is empty, clients SHOULD still include a single space after `ACTION` (i.e. an empty params section) to help ensure compatibility. Clients SHOULD correctly parse incoming ACTION messages with or without the params section.

ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.

Examples:

~~~
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
~~~

~~~
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION \x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION\x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION

  Formatted:  * dan
~~~


## CLIENTINFO

~~~
Query:  CLIENTINFO
Reply:  CLIENTINFO <tokens>
~~~

Clients receiving this message MUST reply with a list of the CTCP messages they support, delimited by an ASCII space.

CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.

Example:

~~~
  Query:  CLIENTINFO
  Reply:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
~~~


## DCC

~~~
Query:  DCC <type> <argument> <host> <port>
Reply:  Described elsewhere.
~~~

This message sets up connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients (e.g. file transfer), or simply direct chat that bypasses the server.

The Direct Client-to-Client (DCC) protocol requires its own specification, and is not described in-depth here.

DCC is widely implemented. Clients MAY implement this CTCP message.


## FINGER

~~~
Query:  FINGER
Reply:  FINGER <info>
~~~

Clients receiving this message MUST reply with miscellaneous information about the user (typically the contents of their realname/gecos field). However, some implementations return the client name and version instead.

FINGER is largely obsolete. Clients MAY implement this CTCP message.

Example:

~~~
  Query:  FINGER
  Reply:  FINGER WeeChat 1.8-dev
~~~


## PING

~~~
Query:  PING <info>
Reply:  PING <info>
~~~

Clients receiving this message MUST send a reply containing exactly the same params as the original query. This message confirms reachability and latency between two clients.

PING is universally implemented. Clients SHOULD implement this CTCP message.

Example:

~~~
  Query:  PING 1473523721 662865
  Reply:  PING 1473523721 662865
  
  Query:  PING foo bar baz
  Reply:  PING foo bar baz
~~~


## SOURCE

~~~
Query:  SOURCE
Reply:  SOURCE <info>
~~~

Clients receiving this message MUST reply with a URL where the source code for the client can be found.

SOURCE is rarely implemented. Clients MAY implement this CTCP message.

Example:

~~~
  Query:  SOURCE
  Reply:  SOURCE https://weechat.org/download
~~~


## TIME

~~~
Query:  TIME
Reply:  TIME <timestring>
~~~

Clients receiving this message MUST reply with the client's local time in a human-readable format. In practice, both the format returned by ctime() and the format described in Section 3.3 of {{!RFC5322}} are common. Earlier specifications recommended prefixing the time string with a colon, but this is no longer recommended.

Clients MAY default to UTC time for privacy reasons and only respond with the local time if the user enables it.

TIME is almost universally implemented. Clients MAY implement this CTCP message.

Example:

~~~
  Query:  TIME
  Reply:  TIME Mon, 08 May 2017 09:15:29 GMT
~~~


## VERSION

~~~
Query:  VERSION
Reply:  VERSION <verstring>
~~~

Clients receiving this message MUST reply with the name and version of the client software in use. There is no specified format for the version string.

Clients MAY receive more than one response for a query they send. Clients may allow users to customise the response value for this query.

VERSION is universally implemented. Clients SHOULD implement this CTCP message.

Example:

~~~
  Query:  VERSION
  Reply:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
~~~


## USERINFO

~~~
Query:  USERINFO
Reply:  USERINFO <info>
~~~

Clients receiving this message MUST reply with miscellaneous information about the user (typically the contents of their realname/gecos field).

USERINFO is largely obsolete. Clients MAY implement this CTCP message.

Example:

~~~
  Query:  USERINFO
  Reply:  USERINFO fred (Fred Foobar)
~~~

# Change History \[RFC Editor: Please remove this section\]

Changes from draft 2 (... 2021)

- Removed the CTCP Types section (thanks James).

Changes from draft 1 (July 18, 2017)

- General editing, fixed mistypes.
- Simplified some of the examples.

Changes from draft 0 (May 29, 2017)

- Added note about servers truncating CTCP messages (thanks Sadie).
- Fixed misspellings and added note to TIME about previously-recommended prefix (thanks Patrick).
- Mentioned how to parse/send empty ACTION messages (thanks dequis and the crew).

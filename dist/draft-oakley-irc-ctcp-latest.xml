<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="May" day="30"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how servers implement message truncation and certain clients implement message splitting.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Many servers implement optional filtering so that only the ACTION CTCP message can be sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement “low-level quoting” or “CTCP-level quoting” when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.</t>

<t>CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='http://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='http://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets,.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2018" month="January" day="09"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how servers implement message truncation and certain clients implement message splitting.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Many servers implement optional filtering so that only the ACTION CTCP message can be sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION Snak for Mac 4.13\x01

  :alice!a@localhost PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP requests special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan!u@localhost PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP provides relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP provides dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement “low-level quoting” or “CTCP-level quoting” when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.</t>

<t>CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='https://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='https://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='https://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>If &lt;text&gt; is empty, clients SHOULD still include a single space after <spanx style="verb">ACTION</spanx> (i.e. an empty params section) to help compatibility. Clients SHOULD correctly parse incoming ACTION messages with or without the params section.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Examples:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION \x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION\x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION

  Formatted:  * dan
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query sets up and controls connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query confirms reachability and latency to the target client. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query returns the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query returns the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common. Earlier specifications recommended prefixing the time string with a colon, but this is no longer recommended.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query returns the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>
<section anchor="change-history-rfc-editor-please-remove-this-section" title="Change History [RFC Editor: Please remove this section]">

<t>Changes from draft 1 (July 18, 2017)</t>

<t><list style="symbols">
  <t>General editing, fixed mistypes.</t>
  <t>Simplified some of the examples.</t>
</list></t>

<t>Changes from draft 0 (May 29, 2017)</t>

<t><list style="symbols">
  <t>Added note about servers truncating CTCP messages (thanks Peter).</t>
  <t>Fixed misspellings and added note to TIME about previously-recommended prefix (thanks Patrick).</t>
  <t>Mentioned how to parse/send empty ACTION messages (thanks dequis and the crew).</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


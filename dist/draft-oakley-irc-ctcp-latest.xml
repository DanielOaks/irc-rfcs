<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="May" day="28"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be attacked or spammed more easily.</t>

<t>CTCP requests can be abused to flood clients off a server. Clients may ignore or throttle excessive incoming requests to protect against this.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='http://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='http://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets,.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


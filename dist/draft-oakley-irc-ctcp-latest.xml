<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2018" month="April" day="27"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> does not provide a way to exchange computer-readable information directly between clients. The Client-to-Client Protocol (CTCP) lets them exchange messages that get processed, displayed or responded to in special ways.</t>

<t>CTCP can be used to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients among other uses. This document covers the subset of CTCP which is commonly implemented, and clients implementing this specification are compatible with those implementing the protocol as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="protocol-structure" title="Protocol Structure">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter.</t>

<t>Queries MAY be sent to channels. Replies MUST always be sent to the querying client only.</t>

<t>Many servers implement optional filtering so that only specific CTCP commands can be sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The ABNF <xref target="RFC5234"/> for CTCP message bodies is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and SPACE

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, but software MUST accept incoming messages which lack it. This avoids issues where messages are truncated or split by the server or client.</t>

<t>In message examples throughout this document, the CTCP delimiter is shown as <spanx style="verb">\x01</spanx>.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION Snak for Mac 4.13\x01

  :alice!a@localhost PRIVMSG #ircv3 :\x01PING 1473523796 918320
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages conform to one of the types described below. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP requests special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan!u@localhost PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP provides static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP provides dynamic information or invokes actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled Mardam-Bey for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Sadie Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement “low-level quoting” or “CTCP-level quoting” when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.</t>

<t>CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='https://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='https://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='https://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>If &lt;text&gt; is empty, clients SHOULD still include a single space after <spanx style="verb">ACTION</spanx> (i.e. an empty params section) to help compatibility. Clients SHOULD correctly parse incoming ACTION messages with or without the params section.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Examples:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION \x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION\x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION

  Formatted:  * dan
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query sets up and controls connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
Reply:   PING <info>
]]></artwork></figure>

<t>This extended query confirms reachability and latency to the target client. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query returns the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  TIME <timestring>
]]></artwork></figure>

<t>This extended query returns the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common. Earlier specifications recommended prefixing the time string with a colon, but this is no longer recommended.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query returns the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>
<section anchor="change-history-rfc-editor-please-remove-this-section" title="Change History [RFC Editor: Please remove this section]">

<t>Changes from draft 1 (July 18, 2017)</t>

<t><list style="symbols">
  <t>General editing, fixed mistypes.</t>
  <t>Simplified some of the examples.</t>
</list></t>

<t>Changes from draft 0 (May 29, 2017)</t>

<t><list style="symbols">
  <t>Added note about servers truncating CTCP messages (thanks Peter).</t>
  <t>Fixed misspellings and added note to TIME about previously-recommended prefix (thanks Patrick).</t>
  <t>Mentioned how to parse/send empty ACTION messages (thanks dequis and the crew).</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
q5ZY8X8A1gcFNVwxAAA=

-->

</rfc>


<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="June" day="19"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how servers implement message truncation and certain clients implement message splitting.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Many servers implement optional filtering so that only the ACTION CTCP message can be sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement “low-level quoting” or “CTCP-level quoting” when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.</t>

<t>CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='http://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='http://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>If &lt;text&gt; is empty, clients SHOULD still include a single space after <spanx style="verb">ACTION</spanx> (i.e. an empty params section) to help compatibility. Clients SHOULD correctly parse incoming ACTION messages with or without the params section.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Examples:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION \x01

  Formatted:  * dan
]]></artwork></figure>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION\x01

  Formatted:  * dan
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>
<section anchor="change-history-rfc-editor-please-remove-this-section" title="Change History [RFC Editor: Please remove this section]">

<t>Changes from draft 0 (May 29, 2017)</t>

<t><list style="symbols">
  <t>Added note about servers truncating CTCP messages (thanks Peter).</t>
  <t>Fixed misspellings (thanks Patrick).</t>
  <t>Mentioned how to parse/send empty ACTION messages (thanks dequis and the crew).</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
DF9BeVKqJSj+H7291R4FMAAA

-->

</rfc>






Network Working Group                                       M. Mikulenas
Internet-Draft
Updates: 1459, 2812 (if approved)                         D. Oakley, Ed.
Intended status: Informational                                   ircdocs
Expires: October 22, 2017                                 April 20, 2017


             Internet Relay Chat: Client-to-Client Protocol
                      draft-oakley-irc-ctcp-latest

Abstract

   The Client-to-Client Protocol (CTCP) lets IRC clients send each other
   messages that get displayed or responded to in special ways.  CTCP is
   widely used today, with some IRC networks requiring that clients
   support it in order to connect to them.  This document goes over CTCP
   as it is used today, and the most common message types in use.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 22, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.





Mikulenas & Oakley      Expires October 22, 2017                [Page 1]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Message Syntax  . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Message Types . . . . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  Extended formatting . . . . . . . . . . . . . . . . . . .   3
     3.2.  Metadata Query  . . . . . . . . . . . . . . . . . . . . .   4
     3.3.  Extended Query  . . . . . . . . . . . . . . . . . . . . .   4
   4.  CTCP Messages . . . . . . . . . . . . . . . . . . . . . . . .   5
     4.1.  ACTION  . . . . . . . . . . . . . . . . . . . . . . . . .   5
     4.2.  CLIENTINFO  . . . . . . . . . . . . . . . . . . . . . . .   5
     4.3.  DCC . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
     4.4.  FINGER  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     4.5.  PING  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
     4.6.  SOURCE  . . . . . . . . . . . . . . . . . . . . . . . . .   7
     4.7.  TIME  . . . . . . . . . . . . . . . . . . . . . . . . . .   7
     4.8.  VERSION . . . . . . . . . . . . . . . . . . . . . . . . .   7
     4.9.  USERINFO  . . . . . . . . . . . . . . . . . . . . . . . .   8
   5.  Normative References  . . . . . . . . . . . . . . . . . . . .   8
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   9

1.  Introduction

   The core Internet Relay Chat (IRC) protocol as described in [RFC1459]
   and [RFC2812] only have a single user messaging type, and do not
   provide a way for clients to exchange information directly.  CTCP
   messages let clients exchange messages that get displayed or
   responded to in special ways.  Some examples of how CTCP is used
   today is to request special formatting on messages, query other
   clients for metadata, and help initiate file transfers with other
   clients.

   This document goes over the subset of CTCP which is commonly
   implemented, and is compatible with clients implementing CTCP as it's
   described by older documents.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Message Syntax

   The PRIVMSG and NOTICE messages are used to transmit CTCP frames.  To
   create a CTCP message, you simply replace the body (i.e. the text to
   be sent) of a PRIVMSG / NOTICE with the following:






Mikulenas & Oakley      Expires October 22, 2017                [Page 2]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


        delim   = %x01

        command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                      ; any octet except NUL, delim, CR, LF, and " "

        params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                      ; any octet except NUL, delim, CR, and LF

        body    = delim command [ SPACE params ] [ delim ]

   The final "delim" SHOULD be sent for compatibility reasons, and
   software MUST accept incoming messages which lack it.  This is due to
   how some software incorrectly implements message splitting.

   CTCP queries are sent with PRIVMSG, and replies are sent with NOTICE.
   In addition, CTCP queries sent to channels always generate private
   replies.

   Here are two examples of CTCP queries and replies:

     :dx PRIVMSG SaberUK :\x01VERSION\x01
     :SaberUK NOTICE dx :\x01VERSION Snak for Macintosh 4.13 English\x01

     :mt PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
     :Jobe NOTICE mt :\x01PING 1473523796 918320\x01

3.  Message Types

   CTCP messages generally take on one of these types.  These message
   types are defined here for informational purposes (to simplify
   understanding), and aren't specified or differentiated by the
   protocol itself.

   Channel-directed CTCPs should never cause an error reply.

3.1.  Extended formatting

   This type of CTCP is used to request special formatting of a user-
   visible message.  That is, to send a user-visible message that should
   be displayed differently from regular messages - e.g. as an action, a
   whisper, an announcement.

   Extended formatting CTCPs are sent as a PRIVMSG.  There is no
   automatic response to this message type, as it is not a query nor
   reply.

   Extended formatting CTCPs are expected to be used in channels as well
   as between clients.  However, many servers implement optional



Mikulenas & Oakley      Expires October 22, 2017                [Page 3]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


   filtering to block CTCPs in channels (apart from ACTION).  Because of
   this, any future extended-formatting CTCPs may be restricted to
   private messages.

   These CTCP messages are sent as a PRIVMSG and generate no reply.

   Example:

     :dan- PRIVMSG #ircv3 :\x01ACTION writes the best specs!\x01

3.2.  Metadata Query

   This type of CTCP is used to provide static information about the
   target client, user or connection.

   This CTCP takes the form of a query and a response (as a PRIVMSG and
   NOTICE, respectively).  Due to how bouncers interact with multiple
   clients, there may sometimes be multiple responses to queries.

   Metadata queries MUST NOT require the recipient to implement any side
   effects (beyond sending the reply itself); if a CTCP message causes
   side effects by design, it should be categorized as an extended query
   instead.

   Example:

     :dx PRIVMSG SaberUK :\x01VERSION\x01
     :SaberUK NOTICE dx :\x01VERSION SaberChat 27.5\x01

3.3.  Extended Query

   This type of CTCP is used to provide dynamic information or invoke
   actions from the client.

   This CTCP takes the form of a query and a response (as a PRIVMSG and
   NOTICE, respectively).

   Queries sent to a channel always generate private replies.

   Example:

     :mt PRIVMSG Jobe :\x01PING 1473523796 918320\x01
     :Jobe NOTICE mt :\x01PING 1473523796 918320\x01








Mikulenas & Oakley      Expires October 22, 2017                [Page 4]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


4.  CTCP Messages

   This section lists those CTCP messages which are commonly seen in use
   today.

   Extended formatting messages can have parameters, but do not generate
   any reply.

   Metadata queries do not have any parameters, but expect a reply with
   parameters as the response data.

   Extended queries and replies may have parameters.

4.1.  ACTION

   Type:    Extended Formatting
   Params:  ACTION <text>

   This extended formatting message shows that "<text>" should be
   displayed as a third-person action or emote; in clients, it's
   generally activated with the command /me.

   ACTION is universally implemented and very commonly used.  Clients
   MUST implement this CTCP message.

   Example:

     Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION writes\x01

     Formatted:  * dan writes

4.2.  CLIENTINFO

   Type:   Metadata Query
   Reply:  CLIENTINFO <token>{ <token>}

   This metadata query returns a list of the CTCP messages that this
   client supports and implements.

   CLIENTINFO is widely implemented.  Clients SHOULD implement this CTCP
   message.

   Example:

     Query:     CLIENTINFO
     Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION





Mikulenas & Oakley      Expires October 22, 2017                [Page 5]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


4.3.  DCC

   Type:    Extended Query
   Params:  DCC <type> <argument> <host> <port>

   DCC (the Direct Client-to-Client protocol) is used to setup and
   control connections that go directly between clients, bypassing the
   IRC server.  This is typically used for features that require a large
   amount of traffic between clients or simply wish to bypass the server
   itself such as file transfer and direct chat.

   Explaining DCC requires its own specification, and is not described
   here.

   DCC is widely implemented.  Clients MAY implement this CTCP message.

4.4.  FINGER

   Type:   Metadata Query
   Reply:  FINGER <info>

   This metadata query returns miscellaneous info about the user,
   typically the same information that's held in their realname field.

   However, some implementations return the client name and version
   instead.

   FINGER is widely implemented, but largely obsolete.  Clients MAY
   implement this CTCP message.

   Example:

     Query:     FINGER
     Response:  FINGER WeeChat 1.5

4.5.  PING

   Type:    Extended Query
   Params:  PING <info>

   This extended query is used to confirm reachability with other
   clients and to check latency.  When receiving a CTCP PING, the reply
   must contain exactly the same parameters as the original query.

   PING is universally implemented.  Clients MUST implement this CTCP
   message.

   Example:



Mikulenas & Oakley      Expires October 22, 2017                [Page 6]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


     Query:     PING 1473523721 662865
     Response:  PING 1473523721 662865

     Query:     PING foo bar baz
     Response:  PING foo bar baz

4.6.  SOURCE

   Type:   Metadata Query
   Reply:  SOURCE <info>

   This metadata query is used to return the location of the source code
   for the client.

   SOURCE is rarely implemented.  Clients MAY implement this CTCP
   message.

   Example:

     Query:     SOURCE
     Response:  SOURCE https://weechat.org/download

4.7.  TIME

   Type:    Extended Query
   Params:  TIME <timestring>

   This extended query is used to return the client's local time in an
   unspecified human-readable format.  We recommend ISO 8601 format, but
   raw ctime() output appears to be the most common in practice.

   New implementations SHOULD default to UTC time for privacy reasons.

   TIME is almost universally implemented.  Clients SHOULD implement
   this CTCP message.

   Example:

     Query:     TIME
     Response:  TIME 2016-09-26T00:45:36Z

4.8.  VERSION

   Type:   Metadata Query
   Reply:  VERSION <verstring>






Mikulenas & Oakley      Expires October 22, 2017                [Page 7]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


   This metadata query is used to return the name and version of the
   client software in use.  There is no specified format for the version
   string.

   VERSION is universally implemented.  Clients MUST implement this CTCP
   message.

   Example:

     Query:     VERSION
     Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)

4.9.  USERINFO

   Type:   Metadata Query
   Reply:  USERINFO <info>

   This metadata query returns miscellaneous info about the user,
   typically the same information that's held in their realname field.

   However, some implementations return "<nickname> (<realname>)"
   instead.

   USERINFO is widely implemented, but largely obsolete.  Clients MAY
   implement this CTCP message.

   Example:

     Query:     USERINFO
     Response:  USERINFO fred (Fred Foobar)

5.  Normative References

   [RFC1459]  Oikarinen, J. and D. Reed, "Internet Relay Chat Protocol",
              RFC 1459, DOI 10.17487/RFC1459, May 1993,
              <http://www.rfc-editor.org/info/rfc1459>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC2812]  Kalt, C., "Internet Relay Chat: Client Protocol",
              RFC 2812, DOI 10.17487/RFC2812, April 2000,
              <http://www.rfc-editor.org/info/rfc2812>.






Mikulenas & Oakley      Expires October 22, 2017                [Page 8]

Internet-Draft        IRC Client-to-Client Protocol           April 2017


Authors' Addresses

   Mantas Mikulenas

   Email: grawity@gmail.com


   Daniel Oakley (editor)
   ircdocs

   Email: daniel@danieloaks.net








































Mikulenas & Oakley      Expires October 22, 2017                [Page 9]

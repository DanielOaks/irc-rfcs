<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="May" day="28"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows::</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be attacked or spammed more easily.</t>

<t>CTCP requests can be abused to flood clients off a server. Clients may ignore or throttle excessive incoming requests to protect against this.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='http://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='http://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets,.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAAiwK1kAA9Va624bxxX+z6eYKCggFSRtUXFsM44Rh5YStbpFklO0TdAM
d4fkQMud7c4saSZIkLco8j59kjxJv3NmZi+UZDtpUqAGZK2WczlzLt/5zhkO
BoNeYlKdz8eicrPBk17PaZepsdg5zp0qc+XEpcrkRkwW0o3FJNMqdwNnBv5J
XJTGmcRkYndyPbnY2+nJ6bRUq7E4vpzcP7qXmiSXS2yTlnLmBkbeZGoz0GUy
SFxSDDLplHW9nq2mS22tNvn1psBonaeqUPgvd70EY+am3NDbmcFYJ/P0HzIz
OQZulO0Veiz+ju36wprSlWpm8bRZ+ofELJdYxX7d61VFStuNxf4Hj572xejJ
/qjXk5VbmHLcE2KAHyHe1zlGnA7Fqb6psn//K5fWv/fHOJW5k3b7w84cFd/e
nlF/ZErY4bh1SHqpllJnYzEv5Vq7zSdz+nMI+WvZeJuXQ3HOWmzt8VLmWmXt
97wB1Az92/biKY/8xP+CNewQlu/1BoOBkFPrSpngr+uFtgIzK9KcSJVNSj1V
VriFeqtj9MV6oZOFyJSz4g7XErtwmD2R8GQrLM4vlMQEg9VLsVTWyjnvhbFz
TE21LTBZpTiTKJUtDDSWCmegDmELlWiZibXc2KEgAcQCyp4qlYu1TlW2EXpZ
ZIoOolLIpt1CLI11jQBVUcBrEBhCO6jT6RVmDUVXB6Zymc4h1sKseeu4qN8T
DsnK8SvD40zenKSyKh16FS91mmaq13ufNFOatEocXJ4UrjCtVG9QWBHVjONF
i6Skgu++e+/yaEIu/f33LIh/Qd6NFyaHCkglUlicMVMsHg2bsTrnVSZLErFR
fZ9XSQ1Ez42jjVfQJBaAknlWVB30oF4nC5nPFYdmuZR0HFisVIkjJb7NWRol
wV3qdetF/ytnuDJLhaUkWcoKM2PTsbW0twn9xsRS/bMCBtWz/TnYIVpW7AuM
KjfBS6OkpI2lchK4Ir3aFiorIIt2GlAjZhoKR1DldqZK672vs8JwO9jmpHaz
wgjyJ8CixakhPAvuIwvDvYttOzft7z8sYIgptuYNo7D1WDqad9u2K01xuCzF
xlEWL5wSN2oj1qZMrdg5fXV1vdP3v8XZOT9fHn7x6vjy8CU9X33+4uSkfogj
rj4/f3XysnlqZk7OT08Pz17yZKz64q87/hQ75xfXx+dnL052yK6uoyGJMIHZ
puRzCJaiVDj8PVEx2t9HVOAciLhTb0lxtQEev+71WANkVA2N06KWVmeNkeov
Lo+/PL36jNNbCBkvG88rVZHdnodzHU8O43BgCLllqimBIXzqDTfeeYts0+et
pibdkI0ZQYKUu2x+lcC/RSFLoDzOuodTz5EEGil5TcCcXmp8TqilxItPz47C
+R+NDj4ACJCbshLj6rwj/pbkwllm1nY87vV++OEHOc1nSBe8ImWNj8UfXj/c
7+FVhA282v/jLr0eDR4+FQ/o6dPBw4l/OhzsH/HTaH9wdCT2OPW0/30EHeKw
iYNbI85V4cTZq5O+37EvJpd9cXIUnEDs0MZ8eiveuvGv3Y62OjminVgr/tRe
AfHMfxdXFy9g2CDK13jhB3xNOut9N4YfOITIzUBmep5/vJNQRJY79WvK0h/v
WPa8ne/he35h7z+JtGoAq6rcaso+Q/GXBdJXUirJoZqrgFtBHAJoJi1WhHgC
mnmgl1kB5ESclDoRAFFK5wQ85ABK0qhZAwMM1iHGZzoH9HW9Ka4+DS4ONEQa
nBuSqUZmzgcBcHQG2gLHltbkIYtYM3NrOiQjhkzYAjrHjM4qgTLI5AZJOORe
ivmKQ52AO1Glk4jrW2BW+zQSg/awzdm4rPIknvCLEOUAmPo0WJeyTK4yGxSO
eIKG2ojQTjA+VP0b2458LESfcGDT7l5CUUrGeWQuXjluFo5az0CyAt6Xek4G
gAXDkhD6c4UdGOzWppPHusCFswYw8hEMPx7DC5MGwaZmKsZfIYy/PLy8AqrS
I42i9wGx/IT2IHGVyxu27qlMALTGLsQHw/0DcQgSoe3iqwALW3u9D8q5OvAr
XRyffQaq/fgAKPT46Yfi6f6Tg9HDN+/+hjl0tjaOU6FgA4zXjjRXuSpZkU7e
KHbZXAVshXEdzWGUtA3U8kvWdKoQB4qSuM8xlrxMzzaighOUXHfAwt6zMT7/
+cefiJLMkNwprUrn0ygZt6Zr2lmVzTgFvS8OXzvF/tSQjEAASIjauJGgvIWd
zJBUiLkNVtpyug8nogOCL2nEIB2CGPbdAz2vsgtTZSkFRsOu6kNBk7PSLGum
WGt6INRwPqQMAgeXzGP7xBFxmEKVfX6b5wZRyGEKBdxx+Ga5OpyYqgZ3qjUN
/8f5nVcJBPX0La8jmGatVcbkeKrcmuh/ZFhkbaygic0ScBpiqUkdyT5+W7mR
LNGnhbTzkyBTiNU85m2Pmla9RX4WP4EmFnKlmjQOu0wrF3wV1CA39aqHPs6b
UEahdmdwvZgQQRLrEkiNIoa4LrmIfa8dKxQsnpwKgsDNW3wtMv0StYcvg4R1
rKw2u5dTZAH2cSfLeU3b+76I4HQAmyR1csEGvBEFpC8haS3vvV6tbOTGILu3
VOhxos9DaGUSbW8oXjbpYcqOhkzHnBDuGCq9KnO6oKLHOwODOCy1RCVDOnMa
BiSHqgc2AI+VA8jiGLUeI+5GBswBqgkuODskutAhKTQZiiiIJcUqBFWC5LU7
VRsidhSaFAV+bkF8ntFi7yOhZ5ExRr9MZEVidRYC2ID1gnL0yVubQA4tE/2t
Z8bwIRWDz6scdMMpmd51stSwz7PLkuTbbutDkQ1GErOemzG0XTtRClr7Lsf+
TXKUnKqSa+TR4+GjrufXaPNLPD/dgKlt+Ts8Wucrg2ziUc56QOSczl71+3p5
w14i25A1l5AZlboNkBSlXtHvQAjamHsHX+Ao2EKmX2Cp3ze938rsUOkSsbEK
WEsuyglZlshaKo29htArQCQqKFAozSysyusEUi8Iu97kZt1q1LArt4auZIbc
G2kwosz4OF+yFgvu3wT0bucSVcc1IWIjGLHPKNfSLyU9P6nnFyr0Yoh4RcfB
iswLUX8GQrwNawh5Zp4eeImEqIUmd8u5fA3g6MvgFwmdOlPpnMHJkvPK/MZG
2TEBOWZemqpgKeZ6RWvPlEqnxM9NqMeZkMy059g+UWOFPy9k5jO8kOmK7G5i
JhazzBhWm2tlh7j1KVixhEtfYaESUcN1RayAyBP64ro0G3FJ5Wr3Uw83GbOv
l5NJTb36bVbw5wzwKf6mqrliWT8FQ4CrSSJ2IC0GmdQ4FcJjRR5Vr9k5KUXI
VeBirpY+pSQAfLygIBIXxu+Ktf4kKcGgvCCfJam5PxTKdx3D0e9DlaK30ZVK
qpJqqQk2BC6VfuvtkODi0VCwOsrVVY6ix9JKTTsqOkidrqS1KA99kLBj0SIk
7oDwyvfV4poQ5pw7QrxtVw11twVOatgM7eYUpr/m/SlMb/dhh+K4U4TWMUYS
NnkzM+tBpgCD9R7Gy7L1dk3VGzDMthnluwmPUjSrOFa7EdnJvJqN0HRQIxRC
mu2Ozzudiy0f0wPvFIXvsE6vt0FLb6xSQm0ABiCAGDDk7Rb03rREOnE8sGzE
rLeqLeSSDMwHRY2umXCGbhYXGbaeNo2J0cds9CIzo3QGfFq1cY0ECuDIfSYE
kssUt1usJbCr6/16H59yHfOIuSQywkohOsJkiXdoF/mmoLNR/aMzhBiHPa0B
PwgEays0oFHnE3VgyvzscfLe+j90HeAAzKdIG2AM8BoqKKEXlctp5rWJpOOf
QcFiOjYFRaqJjd4mTy9NSsHEVwAEop069kTbeOViPTBGB1CvFwAtIgI+mLnF
g+Kbk5yxauvMPgA5nm9FHLhLaayNCC9UYuwGWLEM/R/P5WS72Sj8hcdUIQy5
wyRjPawJFLmXFZMtDGHZF1ay1KQXpqa2KpFGaoq7DGrhGJqW5Jhg5KEy9lby
nMNfAeJfzV6OmnL5gntw+DjY9ZkDtX3u6QMrUd1fZhJDXgeG8BVP/Or5neUv
czP4Q5kOYFNrYoVLlldLOO5HoulFka/8/ONP7eYDjV55UI+d2thL/ObBUn2D
QwfxiYTmmrydJ24H+4oIQN3trzpEhzF9C1U6uEX3M1wo+FqObAjb30HxLuV6
HDumVHG+RxzkkwVdZr2h9uQbIu3ei62gYCSVYq0/0kVjPaJh5ZOT48Oz6+Oz
o/OuqbfY+iW5I943w2FnUPDc3mlpz5NK5aoyJ8tRjMSG+jaLlEFTgZSE6z+f
iWtl2n7dBuUIr6H/xdXk+JigNKGAbomn7Z15Ltoqcsj7rXWHWVgX3jAtvcFc
gS52FRSsQgyo9ZYZ9/Xx6aEIRVNjC4y8L968FepQozWfUe30XDxDzc/3MHgk
B8Ev0t8bzNIqsywsVHheYuj+M2v1CuIln6mvD7c7OSg/NwX4S+R8hGMxF8WO
cQPXvCcxrhloYlWqujDw5TqchLoXQi6BUN5ZSjkDQ9jelVMn2Y1KXbvgBhSL
EZg+7R/KdjgTAbDtXvv521Q+EyUEFxD3pX9z64Z0F8rea+5Jg7wURhBlnd/F
u0O6aN9/DVJVAHio2YH9yH5vcVAqTt7sneQyR/Cmw8uu12y1mGLo+qHiGZXS
be9YtvsNTdAutU3AQmWuTGW5/m41mgiO+i3bsuaRpTp1OpmXYRgUO/XXhkpT
v05mdP0Co+A99dXBzle0HjfN9BZh8/K0qnv+hkXEYsvZue6dhDPiVOxMkMxM
rWHq/AsU+4awD/ruhHzY9C9Kcedjf/gExl41YU0R/45xzeBwy0L3xy+idaZL
agZLeHK477l9qR2LwWShUDBScZMnm0CyfAHMXNfrgWSIdysUZJzVCB7otke9
lowEtcFvN5ri3YmXFurkQ92fVn87TO40M0b74sMPR08+fNQ11r1j7lhqZgAt
ssTPt3cs0v60tvXV+avLyeE7xaMf+tZ47Fw91KGQmSQ0w3xStaYqE+I0qQqX
y61mWNgJK5Ugo78ecN6g+nDujpbCtgvnCjt+8AAYzmhryvmDFMCZGZk2iqOM
+I5BwsnzGXeKHRUe7xYqt3CEoYn0mAlaK9RuVR7wnG6dKhDEAWIrJQYd6CtK
StS21NHWCcqAqQl00n9KF7IFQJKKEFp1d6/+KlIY0PlSxFWoLw6GB2TJ8B2B
gxF9USg0E5bclzlT61vISAZL1UxS4YkDvrqe+IOQ/bnxmNR3v5TiSGvU4Mj4
O1G/ezCyQTv+wBKcUo58+EScokYdPdx/LB4+He8/Go+eis9Orxt3iNzoXQIp
Np+f0YFuecQ7hdOtlBLCKnLSeGkOk2F29war8Zdg4Rh/cS0vE7HTVn0us1DF
lVx8JygrUZLbeG0R2o/c8Gy+LRIRNZ74fwGq0RIdU0YBtnKe2J1rNxar/eHj
wcHo6WA+Gs1Gs/ThgdxrTPvq6vDydr1xj23j4P9X2vLNs1wnNzTvudh9Ftd4
vvdNi7TUZ/z9aEut844V641nJbx396jkwt4gqXlz/QfdgmmXoywAAA==

-->

</rfc>


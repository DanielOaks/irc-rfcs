<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="26"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single user messaging type, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used today is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented today, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle brackets, and represents repeating segments by surrounding them with curly brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message in order to effectively use IRC today.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


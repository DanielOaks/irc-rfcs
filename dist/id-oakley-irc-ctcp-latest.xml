<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="25"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP) which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single user messaging type, and do not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used today is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented today, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION Snak for Macintosh 4.13 English\x01

  :mt PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan- PRIVMSG #ircv3 :\x01ACTION writes the best specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :mt PRIVMSG Jobe :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle-brackets, and represents repeating segments by surrounding them with curly-brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that <spanx style="verb">&lt;text&gt;</spanx> should be displayed as a third-person action or emote; in clients, it’s generally activated with the command /me.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION writes\x01

  Formatted:  * dan writes
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>VERSION is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
AAA=

-->

</rfc>


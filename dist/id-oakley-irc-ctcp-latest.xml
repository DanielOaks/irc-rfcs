<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="May" day="26"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and other related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be attacked or spammed more easily.</t>

<t>CTCP requests can be abused to flood clients off a server. Clients may ignore or throttle excessive incoming requests to protect against this.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5322" target='http://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets, and represents repeating segments by surrounding them with curly brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>DCC requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
44oreoOk5s31f0/H2ADmLAAA

-->

</rfc>


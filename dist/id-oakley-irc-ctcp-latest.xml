<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="25"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP) which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single user messaging type, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used today is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented today, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION Snak for Macintosh 4.13 English\x01

  :mt PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan- PRIVMSG #ircv3 :\x01ACTION writes the best specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :mt PRIVMSG Jobe :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle-brackets, and represents repeating segments by surrounding them with curly-brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that <spanx style="verb">&lt;text&gt;</spanx> should be displayed as a third-person action or emote; in clients, it’s generally activated with the command /me.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION writes\x01

  Formatted:  * dan writes
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>VERSION is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
tCkAAA==

-->

</rfc>


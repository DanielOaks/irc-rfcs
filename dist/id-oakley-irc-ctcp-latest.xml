<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="30"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single user messaging type, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle brackets, and represents repeating segments by surrounding them with curly brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message in order to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


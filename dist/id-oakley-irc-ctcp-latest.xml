<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="25"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP) which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used today, with some IRC networks requiring that clients support it in order to connect to them. This document details how CTCP is used and lists the common messages in use.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only have a single user messaging type, and do not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used today is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as it’s described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to. Channel-directed CTCP messages SHOULD never cause an error reply.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION Snak for Macintosh 4.13 English\x01

  :mt PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>Extended formatting messages are expected to be used in channels as well as between clients. However, implementers should be aware that many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan- PRIVMSG #ircv3 :\x01ACTION writes the best specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :mt PRIVMSG Jobe :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that <spanx style="verb">&lt;text&gt;</spanx> should be displayed as a third-person action or emote; in clients, it’s generally activated with the command /me.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION writes\x01

  Formatted:  * dan writes
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply must contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations SHOULD default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>VERSION is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


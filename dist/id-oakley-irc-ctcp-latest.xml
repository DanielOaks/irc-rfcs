<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="25"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP) which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single user messaging type, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used today is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented today, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle brackets, and represents repeating segments by surrounding them with curly brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that <spanx style="verb">&lt;text&gt;</spanx> should be displayed as a third-person action or emote; in clients, it’s generally activated with the command /me.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION writes!\x01

  Formatted:  * dan writes!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>VERSION is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="May" day="02"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification. Thanks to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications many years ago.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be attacked or spammed more easily.</t>

<t>CTCP requests can be abused to flood clients off a server. Clients may ignore excessive incoming requests to protect against this.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle brackets, and represents repeating segments by surrounding them with curly brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>DCC requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
Ar27x5YrdoPEFdz1P15qnKp2LAAA

-->

</rfc>


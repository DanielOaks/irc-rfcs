<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="25"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single user messaging type, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used today is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented today, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle brackets, and represents repeating segments by surrounding them with curly brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command /me.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>VERSION is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
keD0kPLDOxf8q4rHYd2ivOYpCr6OMNmjedXLkL3ZJ+rj1J4IyiIm6Lf84NuX
t7YcXBoBL5slgIgzZVdBQFIT49VXoh4qEPTQfTUbPlo95xasGh6U06BHE0JW
FJ4YQKEpdPix9SCdU9muZquzlSrD6XctGzThdUshPZeLXjnZIjL/gMrD12N6
LfAJWs/jd+0flF129IXKsNcX9AKnWlFzn/7x0cHp5dHp4dmqR9dagHMCMe7X
y+FOEJ3i5fvy4kPDs5MmU6T05We2IE9RiMXGWqwXbRltE0ch8TVL4CGV+Vwc
6enYNVcvJV5d9I+OKPOlZNCGnPXLnpUiVHqnLNmf5R82SvBQw4DwW6zuq5aK
7tnv95t3meBcHp0ciMhRa6dg5cfiK7ijCi3ac4+o6kuxhxaLJ9y4JKTgF9kv
Bhwt3CSr7/OLlptvWcrRw1aT7Do4bhq4hKHXTXmjYyvfsJjq3c16E40mYDkF
5yj7FsqOof7UE8C6CPCZNDoaIj/NrKroWWiagB3qIYWcIE8FDFk5RFVfP5UL
YJidL7Qbc+/PYkS+RefH5gkYo7TuVt+2hFdZwUwoM2EIgXSjC1KEDBllolDC
cYtilWFUL1Ko0NQvFaib7ARH3AFJGjh+Go8EkkPg5+D8XlEbloo96lVe3h2m
E+1SkEJZKDNz3OA0OnnKRO2G29ioKGsrjRB5jhPtWOVZeAWjNE1BZE4jctgb
92laaRagGbYdRhF6jUwFeRrtE7+0LvOt43JeNadRx1tNG7pRxg++MANnmOF+
hsE/kQCiH1aCPwrzg1LccnY7T+vgpri/Z3RzirjhtfX+vA5XBOdQWxq7SQA3
jutvvjpkCzJJU+mVoL+kKNJlZGqhG2JuGmxAMpRTbIoprmaUDWhYr64lB34F
gpvdfTmlDtLClKzUx8vp76qbDbes9I87XbG7u/Ns9+mqmz665pathgZ5RFr8
/HLLJs1vK09fnL057x/cK0LD0jsjdGXEWwVHbtI4fwiF1ZmZTYnHZDxaWJ0/
xJOwkwWf/e0p6BOmj3qvWCkeO/Z+6nqPHiFhc2o1dvQoQwbNjcxqw1FVvGeI
cAHd4+Gcp97lfoFyI7NwsiI75oL2ip3WrIiJndL3DKQwQWRlxL8jZUXQ8CiP
/1QoE0cXZ+LZ7nY3fhvSjpULkdKmm1v0em2KW3IKDm5dHEuv/8UHzp7SXFIz
kzlVixuJkbyTqaGknhB7vLnsB6nJ2TzYSau3dNSEkImgvMz5lDvj7vcyIvbe
ivNZgp3t7m6y/TzZ2b3c3u49edp7vPvX2uUlB7pPsJQzvT3S44bX7xUyNwpJ
DJ2Se5ZvNeELPL36NqDGRHBzFWPlXkEmGKkU9I/PdqX5VsxeHt8oQ4lNd8Tm
SPuemMePSTcZpd0nT7qD7lbtjzcXB+f37grKxf+vDOPdXqHTK3rupdjcK/d4
ufWuwS8qHf/3DKPyxYp3K4GGFlDcPLTcfRtUoeDG/wDS0fi+uSkAAA==

-->

</rfc>


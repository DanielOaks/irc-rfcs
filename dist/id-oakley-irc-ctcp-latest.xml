<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="25"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP) which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only have a single user messaging type, and do not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used today is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented today, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to. Channel-directed CTCP messages SHOULD never cause an error reply.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION Snak for Macintosh 4.13 English\x01

  :mt PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>Extended formatting messages are expected to be used in channels as well as between clients. However, implementers should be aware that many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan- PRIVMSG #ircv3 :\x01ACTION writes the best specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dx PRIVMSG SaberUK :\x01VERSION\x01
  :SaberUK NOTICE dx :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :mt PRIVMSG Jobe :\x01PING 1473523796 918320\x01
  :Jobe NOTICE mt :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that <spanx style="verb">&lt;text&gt;</spanx> should be displayed as a third-person action or emote; in clients, it’s generally activated with the command /me.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION writes\x01

  Formatted:  * dan writes
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply must contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations SHOULD default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>VERSION is universally implemented. Clients MUST implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is widely implemented, but largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


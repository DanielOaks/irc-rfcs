<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-latest" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="April" day="26"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets IRC clients send each other messages that get displayed or responded to in special ways. CTCP is widely used, with some IRC networks requiring that clients support it in order to connect to them. This document details how to implement CTCP and lists the most common messages.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single user messaging type, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>The PRIVMSG and NOTICE messages are used to transmit CTCP frames. To create a CTCP message, you simply replace the body (i.e. the text to be sent) of a PRIVMSG / NOTICE with the following:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim   = %x01

  command = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params  = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body    = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final <spanx style="verb">delim</spanx> SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting which is complex and not widely implemented. Implementations SHOULD NOT implement low-level quoting or CTCP-level quoting when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a PRIVMSG or a NOTICE. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation can be attacked or spammed more easily.</t>

<t>Many servers implement optional filtering to prevent any CTCP messages apart from ACTION from being sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that uses represents variables by surrounding them with angle brackets, and represents repeating segments by surrounding them with curly brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message in order to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  CLIENTINFO <token>{ <token>}
]]></artwork></figure>

<t>This metadata query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>DCC (the Direct Client-to-Client protocol) is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>Explaining DCC requires its own specification, and is not described here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.5
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. We recommend ISO 8601 format, but raw ctime() output appears to be the most common in practice.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME 2016-09-26T00:45:36Z
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.5-rc2 (git: v1.5-rc2-1-gc1441b1)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


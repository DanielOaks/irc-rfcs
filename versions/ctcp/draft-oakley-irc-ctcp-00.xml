<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-00" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2017" month="May" day="29"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how certain clients implement message splitting and truncation.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Many servers implement optional filtering so that only the ACTION CTCP message can be sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION Snak for Macintosh 4.13 English\x01

  :alice PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP is used to request special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP is used to provide relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01VERSION\x01
  :bob NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP is used to provide dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement “low-level quoting” or “CTCP-level quoting” when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.</t>

<t>CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='http://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='http://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='http://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='http://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets,.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query is used to setup and control connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query is used to confirm reachability with other clients and to check latency. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query is used to return the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query is used to return the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query is used to return the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


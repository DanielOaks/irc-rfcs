<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-02" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2018" month="January" day="09"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how servers implement message truncation and certain clients implement message splitting.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Many servers implement optional filtering so that only the ACTION CTCP message can be sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION Snak for Mac 4.13\x01

  :alice!a@localhost PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP requests special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan!u@localhost PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP provides relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP provides dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Sadie and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement “low-level quoting” or “CTCP-level quoting” when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.</t>

<t>CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='https://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='https://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='https://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>If &lt;text&gt; is empty, clients SHOULD still include a single space after <spanx style="verb">ACTION</spanx> (i.e. an empty params section) to help compatibility. Clients SHOULD correctly parse incoming ACTION messages with or without the params section.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Examples:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION \x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION\x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION

  Formatted:  * dan
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query sets up and controls connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query confirms reachability and latency to the target client. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query returns the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query returns the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common. Earlier specifications recommended prefixing the time string with a colon, but this is no longer recommended.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query returns the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>
<section anchor="change-history-rfc-editor-please-remove-this-section" title="Change History [RFC Editor: Please remove this section]">

<t>Changes from draft 1 (July 18, 2017)</t>

<t><list style="symbols">
  <t>General editing, fixed mistypes.</t>
  <t>Simplified some of the examples.</t>
</list></t>

<t>Changes from draft 0 (May 29, 2017)</t>

<t><list style="symbols">
  <t>Added note about servers truncating CTCP messages (thanks Peter).</t>
  <t>Fixed misspellings and added note to TIME about previously-recommended prefix (thanks Patrick).</t>
  <t>Mentioned how to parse/send empty ACTION messages (thanks dequis and the crew).</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>


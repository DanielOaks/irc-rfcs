<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-oakley-irc-ctcp-02" category="info" submissionType="independent" updates="1459, 2812">

  <front>
    <title abbrev="IRC Client-to-Client Protocol">Internet Relay Chat: Client-to-Client Protocol (CTCP)</title>

    <author initials="M." surname="Mikulenas" fullname="Mantas Mikulenas">
      <organization>Independent</organization>
      <address>
        <email>grawity@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Oakley" fullname="Daniel Oakley">
      <organization>ircdocs</organization>
      <address>
        <email>daniel@danieloaks.net</email>
      </address>
    </author>

    <date year="2018" month="January" day="09"/>

    
    
    

    <abstract>


<t>This document describes the Client-to-Client Protocol (CTCP), which lets Internet Relay Chat (IRC) clients send each other messages that get displayed or responded to in special ways. CTCP has been widely implemented, with most clients supporting it natively. This document outlines how to implement CTCP and the most common messages used.</t>

<t>It updates RFC 1459 and RFC 2812.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The core Internet Relay Chat (IRC) protocol as described in <xref target="RFC1459"/> and <xref target="RFC2812"/> only has a single command for regular user messages, and does not provide a way for clients to exchange information directly. Client-to-Client Protocol (CTCP) messages let clients exchange messages that get displayed or responded to in special ways. Some examples of how CTCP is used is to request special formatting on messages, query other clients for metadata, and help initiate file transfers with other clients.</t>

<t>This document goes over the subset of CTCP which is commonly implemented, and is compatible with clients implementing CTCP as described by older documents.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”,  “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="message-syntax" title="Message Syntax">

<t>CTCP queries are sent with the PRIVMSG IRC command, and CTCP replies are sent with NOTICE command. To indicate a CTCP query or reply, the body of the message (the second parameter) begins with the CTCP delimiter. The ABNF <xref target="RFC5234"/> for this message body is as follows:</t>

<figure><artwork type="abnf" align="center" name="syntax"><![CDATA[
  delim    = %x01

  command  = 1*( %x02-09 / %x0B-0C / %x0E-1F / %x21-FF )
                ; any octet except NUL, delim, CR, LF, and " "

  params   = 1*( %x02-09 / %x0B-0C / %x0E-FF )
                ; any octet except NUL, delim, CR, and LF

  body     = delim command [ SPACE params ] [ delim ]
]]></artwork></figure>

<t>Commands are case-insensitive. When creating new CTCP commands, authors SHOULD use only alphanumeric characters for ease of implementation.</t>

<t>The final CTCP delimiter SHOULD be sent on outgoing messages for compatibility reasons, and software MUST accept incoming messages which lack it. This is due to how servers implement message truncation and certain clients implement message splitting.</t>

<t>Queries MAY be sent to channels. When these queries are responded to, the responses are sent to the querying client rather than the channel which the query was originally sent to.</t>

<t>Many servers implement optional filtering so that only the ACTION CTCP message can be sent to channels. When this is done, it can typically be enabled or disabled by channel operators with a channel mode.</t>

<t>Here are two examples of CTCP queries and replies:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION Snak for Mac 4.13\x01

  :alice!a@localhost PRIVMSG #ircv3 :\x01PING 1473523796 918320\x01
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
<section anchor="message-types" title="Message Types">

<t>CTCP messages generally take on one of these types. These message types are defined here to simplify understanding, and aren’t differentiated by the protocol itself.</t>

<section anchor="extended-formatting" title="Extended formatting">

<t>This type of CTCP requests special formatting of a user-visible message. That is, to send a user-visible message that should be displayed differently from regular messages - e.g. as an action, a whisper, an announcement.</t>

<t>Extended formatting messages are sent as a PRIVMSG, and are expected to be used in channels as well as between clients. There is no automatic response to this message type, as it is not a query nor reply.</t>

<t>These messages are sent as a PRIVMSG and can have parameters, but generate no reply.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :dan!u@localhost PRIVMSG #ircv3 :\x01ACTION writes some specs!\x01
]]></artwork></figure>

</section>
<section anchor="metadata-query" title="Metadata Query">

<t>This type of CTCP provides relatively static information about the target client, user or connection.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively). Due to how bouncers interact with multiple clients, there may sometimes be multiple responses to queries.</t>

<t>Metadata queries MUST NOT require the recipient to implement any side effects (beyond sending the reply itself); if a CTCP message causes side effects by design, it should be categorized as an extended query instead.</t>

<t>Metadata queries do not have any parameters, but expect a reply with parameters as the response data.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01VERSION\x01
  :bob!b@localhost NOTICE alice :\x01VERSION SaberChat 27.5\x01
]]></artwork></figure>

</section>
<section anchor="extended-query" title="Extended Query">

<t>This type of CTCP provides dynamic information or invoke actions from the client.</t>

<t>This CTCP takes the form of a query and a response (as a PRIVMSG and NOTICE, respectively).</t>

<t>Queries sent to a channel always generate private replies.</t>

<t>Extended queries and replies may have parameters.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  :alice!a@localhost PRIVMSG bob :\x01PING 1473523796 918320\x01
  :bob!b@localhost NOTICE alice :\x01PING 1473523796 918320\x01
]]></artwork></figure>

</section>
</section>
<section anchor="messages" title="Messages">

<t>CTCP messages themselves are not standardised. Clients that receive either unexpected messages or known messages with unexpected values SHOULD ignore them and produce no response to the sending user. Clients MAY receive more than one response per user for a query they send, due to multiple clients being connected behind an IRC bouncer.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to the IRCv3 group for giving feedback on this specification, and to Khaled for advice on client flood protection.</t>

<t>Thanks to Michael Sandrof for creating CTCP, Troy Rollo for creating the related DCC protocol, as well as Klaus Zeuge and Ben Mesander who wrote and revised related specifications.</t>

<t>Special thanks to dequis, Peter Powell and James Wheare for help with this and related work.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>CTCP messages are completely untrusted data, and clients MUST NOT assume that they are well-formed or complete.</t>

<t>Older CTCP specifications describe quoting methods which are complex and not widely implemented. Implementations SHOULD NOT implement “low-level quoting” or “CTCP-level quoting” when parsing messages.</t>

<t>Older CTCP specifications describe including more than one CTCP message inside a single PRIVMSG or NOTICE command. Implementations SHOULD NOT implement this form of CTCP parsing as it is not widely-implemented and may result in an implementation that can be more easily flooded off the server they are connected to.</t>

<t>CTCP requests can be abused to flood clients off the server they are connected to. Clients may ignore or delay excessive incoming requests to protect against this.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC1459" target='https://www.rfc-editor.org/info/rfc1459'>
<front>
<title>Internet Relay Chat Protocol</title>
<author initials='J.' surname='Oikarinen' fullname='J. Oikarinen'><organization /></author>
<author initials='D.' surname='Reed' fullname='D. Reed'><organization /></author>
<date year='1993' month='May' />
<abstract><t>The IRC protocol is a text-based protocol, with the simplest client being any socket program capable of connecting to the server.  This memo defines an Experimental Protocol for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='1459'/>
<seriesInfo name='DOI' value='10.17487/RFC1459'/>
</reference>



<reference  anchor="RFC2812" target='https://www.rfc-editor.org/info/rfc2812'>
<front>
<title>Internet Relay Chat: Client Protocol</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'><organization /></author>
<date year='2000' month='April' />
<abstract><t>This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2812'/>
<seriesInfo name='DOI' value='10.17487/RFC2812'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC5322" target='https://www.rfc-editor.org/info/rfc5322'>
<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick' role='editor'><organization /></author>
<date year='2008' month='October' />
<abstract><t>This document specifies the Internet Message Format (IMF), a syntax for text messages that are sent between computer users, within the framework of &quot;electronic mail&quot; messages.  This specification is a revision of Request For Comments (RFC) 2822, which itself superseded Request For Comments (RFC) 822, &quot;Standard for the Format of ARPA Internet Text Messages&quot;, updating it to reflect current practice and incorporating incremental changes that were specified in other RFCs.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5322'/>
<seriesInfo name='DOI' value='10.17487/RFC5322'/>
</reference>




    </references>



<section anchor="message-list" title="Message List">

<t>This section is not exhaustive, and only lists those CTCP messages which are widely implemented across the IRC ecosystem.</t>

<t>The reply and parameter lines below use a simplified syntax that represents variables by surrounding them with angle brackets.</t>

<section anchor="action" title="ACTION">

<figure><artwork><![CDATA[
Type:    Extended Formatting
Params:  ACTION <text>
]]></artwork></figure>

<t>This extended formatting message shows that &lt;text&gt; should be displayed as a third-person action or emote; in clients, it’s generally activated with the command <spanx style="verb">/me</spanx>.</t>

<t>If &lt;text&gt; is empty, clients SHOULD still include a single space after <spanx style="verb">ACTION</spanx> (i.e. an empty params section) to help compatibility. Clients SHOULD correctly parse incoming ACTION messages with or without the params section.</t>

<t>ACTION is universally implemented and very commonly used. Clients MUST implement this CTCP message to effectively use IRC.</t>

<t>Examples:</t>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION does it!\x01

  Formatted:  * dan does it!
]]></artwork></figure>

<figure><artwork><![CDATA[
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION \x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION\x01
  Raw:        :dan!user@host PRIVMSG #ircv3 :\x01ACTION

  Formatted:  * dan
]]></artwork></figure>

</section>
<section anchor="clientinfo" title="CLIENTINFO">

<figure><artwork><![CDATA[
Type:   Extended Query
Reply:  CLIENTINFO <tokens>
]]></artwork></figure>

<t>This extended query returns a list of the CTCP messages that this client supports and implements, delimited by a single ASCII space.</t>

<t>CLIENTINFO is widely implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     CLIENTINFO
  Response:  CLIENTINFO ACTION DCC CLIENTINFO PING TIME VERSION
]]></artwork></figure>

</section>
<section anchor="dcc" title="DCC">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  DCC <type> <argument> <host> <port>
]]></artwork></figure>

<t>This extended query sets up and controls connections that go directly between clients, bypassing the IRC server. This is typically used for features that require a large amount of traffic between clients or simply wish to bypass the server itself such as file transfer and direct chat.</t>

<t>The Direct Client-to-Client (DCC) Protocol requires its own specification, and is not described in-depth here.</t>

<t>DCC is widely implemented. Clients MAY implement this CTCP message.</t>

</section>
<section anchor="finger" title="FINGER">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  FINGER <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return the client name and version instead.</t>

<t>FINGER is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     FINGER
  Response:  FINGER WeeChat 1.8-dev
]]></artwork></figure>

</section>
<section anchor="ping" title="PING">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  PING <info>
]]></artwork></figure>

<t>This extended query confirms reachability and latency to the target client. When receiving a CTCP PING, the reply MUST contain exactly the same parameters as the original query.</t>

<t>PING is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     PING 1473523721 662865
  Response:  PING 1473523721 662865
  
  Query:     PING foo bar baz
  Response:  PING foo bar baz
]]></artwork></figure>

</section>
<section anchor="source" title="SOURCE">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  SOURCE <info>
]]></artwork></figure>

<t>This metadata query returns the location of the source code for the client.</t>

<t>SOURCE is rarely implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     SOURCE
  Response:  SOURCE https://weechat.org/download
]]></artwork></figure>

</section>
<section anchor="time" title="TIME">

<figure><artwork><![CDATA[
Type:    Extended Query
Params:  TIME <timestring>
]]></artwork></figure>

<t>This extended query returns the client’s local time in an unspecified human-readable format. In practice, both the format output by ctime() and the format described in Section 3.3 of <xref target="RFC5322"/> are common. Earlier specifications recommended prefixing the time string with a colon, but this is no longer recommended.</t>

<t>New implementations MAY default to UTC time for privacy reasons.</t>

<t>TIME is almost universally implemented. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     TIME
  Response:  TIME Mon, 08 May 2017 09:15:29 GMT
]]></artwork></figure>

</section>
<section anchor="version" title="VERSION">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  VERSION <verstring>
]]></artwork></figure>

<t>This metadata query returns the name and version of the client software in use. There is no specified format for the version string.</t>

<t>Clients may allow users to customise the response value for this query.</t>

<t>VERSION is universally implemented. Clients SHOULD implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     VERSION
  Response:  VERSION WeeChat 1.8-dev (git: v1.7-329-g22f2fd03a)
]]></artwork></figure>

</section>
<section anchor="userinfo" title="USERINFO">

<figure><artwork><![CDATA[
Type:   Metadata Query
Reply:  USERINFO <info>
]]></artwork></figure>

<t>This metadata query returns miscellaneous info about the user, typically the same information that’s held in their realname field.</t>

<t>However, some implementations return <spanx style="verb">&lt;nickname&gt; (&lt;realname&gt;)</spanx> instead.</t>

<t>USERINFO is largely obsolete. Clients MAY implement this CTCP message.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
  Query:     USERINFO
  Response:  USERINFO fred (Fred Foobar)
]]></artwork></figure>

</section>
</section>
<section anchor="change-history-rfc-editor-please-remove-this-section" title="Change History [RFC Editor: Please remove this section]">

<t>Changes from draft 1 (July 18, 2017)</t>

<t><list style="symbols">
  <t>General editing, fixed mistypes.</t>
  <t>Simplified some of the examples.</t>
</list></t>

<t>Changes from draft 0 (May 29, 2017)</t>

<t><list style="symbols">
  <t>Added note about servers truncating CTCP messages (thanks Peter).</t>
  <t>Fixed misspellings and added note to TIME about previously-recommended prefix (thanks Patrick).</t>
  <t>Mentioned how to parse/send empty ACTION messages (thanks dequis and the crew).</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

